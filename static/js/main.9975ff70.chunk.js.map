{"version":3,"sources":["ImageComponent/ImageComponent.js","ArrowComponent/ArrowComponent.js","DotComponent/DotComponent.js","App.js","serviceWorker.js","index.js"],"names":["ImageComponent","props","image","react_default","a","createElement","src","className","alt","ArrowComponent","click","arrowCode","arrowDirection","concat","onClick","DotComponent","id","App","state","images","imageIndex","leftArrowClickHandler","lastIndexOfImages","_this","length","newImageIndex","setState","rightArrowClickHandler","dotClickHandler","dotIndex","_this2","this","dotsComponent","map","imageName","index","selectedDot","src_DotComponent_DotComponent","key","process","src_ImageComponent_ImageComponent","src_ArrowComponent_ArrowComponent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAYeA,eATQ,SAACC,GAAU,IACvBC,EAASD,EAATC,MACP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EACVK,UAAU,cACVC,IAAI,eCIGC,SATQ,SAACR,GAAU,IACvBS,EAAoCT,EAApCS,MAAOC,EAA6BV,EAA7BU,UAAWC,EAAkBX,EAAlBW,eAEzB,OACIT,EAAAC,EAAAC,cAAA,OAAKE,UAAS,SAAAM,OAAWD,EAAX,SACTE,QAASJ,GAAQC,KCEfI,SAPM,SAACd,GAClB,OACIE,EAAAC,EAAAC,cAAA,QAAME,UAAWN,EAAMe,GACjBF,QAASb,EAAMS,UC4EdO,6MAzEbC,MAAQ,CACNC,OAAQ,CAAC,cACA,cACA,cACA,cACA,cACA,eACTC,WAAY,KAGdC,sBAAwB,WACtB,IAAMC,EAAoBC,EAAKL,MAAMC,OAAOK,OAAS,EAC/CJ,EAAaG,EAAKL,MAAME,WACxBK,EAAgC,IAAfL,EAAoBE,EAAoBF,EAAa,EAC5EG,EAAKG,SAAS,CAACN,WAAYK,OAG7BE,uBAAyB,WACvB,IAAML,EAAoBC,EAAKL,MAAMC,OAAOK,OAAS,EAC/CJ,EAAaG,EAAKL,MAAME,WACxBK,EAAiBL,IAAeE,EAAqB,EAAIF,EAAa,EAC5EG,EAAKG,SAAS,CAACN,WAAYK,OAG7BG,gBAAkB,SAACC,GACjBN,EAAKG,SAAS,CAACN,WAAYS,6EAGpB,IAAAC,EAAAC,KAEDC,EACJ7B,EAAAC,EAAAC,cAAA,WACG0B,KAAKb,MAAMC,OAAOc,IAAI,SAACC,EAAWC,GACjC,IAAIC,EAAc,OAIlB,OAHID,IAAUL,EAAKZ,MAAME,aACvBgB,EAAc,iBAETjC,EAAAC,EAAAC,cAACgC,EAAD,CAAc3B,MAAO,kBAAMoB,EAAKF,gBAAgBO,IAClCnB,GAAIoB,EACJE,IAAKH,OAK1BjC,EAAQqC,0BAAsCR,KAAKb,MAAMC,OAAOY,KAAKb,MAAME,YAEjF,OACEjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAEfJ,EAAAC,EAAAC,cAACmC,EAAD,CAAgBtC,MAAOA,IACvBC,EAAAC,EAAAC,cAACoC,EAAD,CAAgB/B,MAAOqB,KAAKV,sBACVV,UAAU,SACVC,eAAe,SAEjCT,EAAAC,EAAAC,cAACoC,EAAD,CAAgB/B,MAAOqB,KAAKJ,uBACVhB,UAAU,SACVC,eAAe,UAGhCoB,WAhEOU,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9975ff70.chunk.js","sourcesContent":["import React from 'react';\nimport './ImageComponent.css';\n\nconst ImageComponent = (props) => {\n    const {image} = props;\n    return (\n        <img src={image}\n        className=\"image-slide\"\n        alt='carousel'></img>\n    )\n}\n\nexport default ImageComponent;","import React from 'react';\nimport './ArrowComponent.css';\n\nconst ArrowComponent = (props) => {\n    const {click, arrowCode, arrowDirection} = props;\n\n    return (\n        <div className={`arrow ${arrowDirection} grow`}\n             onClick={click}>{arrowCode}</div>\n    )\n}\n\nexport default ArrowComponent;","import React from 'react';\nimport \"./DotComponent.css\"\n\nconst DotComponent = (props) => {\n    return (\n        <span className={props.id}\n              onClick={props.click}></span>\n    )\n}\n\nexport default DotComponent;","import React, { Component } from 'react';\nimport './App.css';\nimport ImageComponent from './ImageComponent/ImageComponent.js';\nimport ArrowComponent from './ArrowComponent/ArrowComponent.js';\nimport DotComponent from './DotComponent/DotComponent.js';\n\n\nclass App extends Component {\n\n  state = {\n    images: ['slide-1.jpg',\n             'slide-2.jpg', \n             'slide-3.jpg', \n             'slide-4.jpg', \n             'slide-5.jpg', \n             'slide-6.jpg'],\n    imageIndex: 0\n  }\n\n  leftArrowClickHandler = () => {\n    const lastIndexOfImages = this.state.images.length - 1;\n    const imageIndex = this.state.imageIndex;\n    const newImageIndex = (imageIndex === 0) ? lastIndexOfImages : imageIndex - 1;\n    this.setState({imageIndex: newImageIndex});\n  }\n\n  rightArrowClickHandler = () => {\n    const lastIndexOfImages = this.state.images.length - 1;\n    const imageIndex = this.state.imageIndex;\n    const newImageIndex = (imageIndex === lastIndexOfImages) ? 0 : imageIndex + 1;\n    this.setState({imageIndex: newImageIndex});\n  }\n\n  dotClickHandler = (dotIndex) => {\n    this.setState({imageIndex: dotIndex});\n  }\n\n  render() {\n\n    const dotsComponent = (\n      <div>\n        {this.state.images.map((imageName, index) => {\n          let selectedDot = \"dots\";\n          if (index === this.state.imageIndex) {\n            selectedDot = \"dots selected\";\n          }\n          return <DotComponent click={() => this.dotClickHandler(index)}\n                               id={selectedDot}\n                               key={index}/>\n        })}\n      </div>\n    );\n\n    const image = process.env.PUBLIC_URL + '/images/' + this.state.images[this.state.imageIndex];\n    \n    return (\n      <div className=\"App\">\n          <h1>React-Based Image Carousel</h1>\n          <h3>By Issac Holguin</h3>\n          <div className=\"unselectable\">\n\n          <ImageComponent image={image} />\n          <ArrowComponent click={this.leftArrowClickHandler}\n                            arrowCode='&#8592;'\n                            arrowDirection='left'\n                            ></ArrowComponent>\n          <ArrowComponent click={this.rightArrowClickHandler}\n                            arrowCode=\"&#8594;\"\n                            arrowDirection='right'\n                            ></ArrowComponent>\n         \n          {dotsComponent}\n          </div>\n\n         \n        \n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n \n/*\n\n pose={this.state.hovering ? \"hovered\" : \"idle\"}\n                          onMouseEnter={() => this.setState({ hovering: true })}\n                          onMouseLeave={() => this.setState({ hovering: false })}\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}